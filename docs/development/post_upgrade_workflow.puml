@startuml

start

:set option to output on the standard error stream stderr;
:set option nounset, which causes the shell to indicate an error
when it encounters an undefined variable;
:set option pipefail to abort the whole script
in case of an error of one line;

:source the util.sh;
:source the pre-upgrade.sh;

if (the script is actively executed) then (yes)
:call function run_postupgrade() with all params;
else (no)
 stop
endif

:First param into variable FROM_VERSION;
:Second param into variable TO_VERSION;

:receive postgresql DATABASE_USER,
DATABASE_USER_PASSWORD and DATABASE_DB via
doguctl command;


if (FROM_VERSION is equal to TO_VERSION) then (yes)
:exit with status code 0;
end
else (no)
endif

if (is FROM_VERSION less or equal than "4.1.0-3") then (yes)
:delete duplicated settings in database;
else (no)
endif

if (is FROM_VERSION less or equal than "4.2.3-4") then (no)
    elseif (is FROM_VERSION NOT less or equal then "4.2.2-1") then (yes)
        :migrate plugin back to plugins directory
        with the path from the MIGRATION4234_TMP_DIR variable;
    else (no)

endif

:create secrets yml;

:render config ru template;

:render database yml template;

:render configuration yml template;

:install plugins;

:execute command: exec_rake db:migrate;

:execute command: exec_rake tmp:cache:clear;

:execute command: doguctl state "upgrade done";

stop

@enduml
